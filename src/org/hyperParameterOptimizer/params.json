{
  "algorithm_variants": {
    "IM": {
      "algorithm": "InductiveMiner",
      "variant": "Inductive Miner (IM)",
      "requiresNoiseThreshold": false
    },
    "IMf": {
      "algorithm": "InductiveMiner",
      "variant": "Inductive Miner - infrequent (IMf)",
      "requiresNoiseThreshold": true
    },
    "IMa": {
      "algorithm": "InductiveMiner",
      "variant": "Inductive Miner - all operators (IMa)",
      "requiresNoiseThreshold": false
    },
    "IMfa": {
      "algorithm": "InductiveMiner",
      "variant": "Inductive Miner - infrequent & all operators (IMfa)",
      "requiresNoiseThreshold": true
    },
    "IMc": {
      "algorithm": "InductiveMiner",
      "variant": "Inductive Miner - incompleteness (IMc)",
      "requiresNoiseThreshold": false
    },
    "IMlc": {
      "algorithm": "InductiveMiner",
      "variant": "Inductive Miner - life cycle (IMlc)",
      "requiresNoiseThreshold": false
    },
    "IMflc": {
      "algorithm": "InductiveMiner",
      "variant": "Inductive Miner - infrequent & life cycle (IMflc)",
      "requiresNoiseThreshold": true
    },
    "Alpha": {
      "algorithm": "AlphaMiner",
      "variant": "Alpha"
    },
    "Alpha+": {
      "algorithm": "AlphaMiner",
      "variant": "Alpha+"
    },
    "Alpha++": {
      "algorithm": "AlphaMiner",
      "variant": "Alpha++"
    },
    "Alpha#": {
      "algorithm": "AlphaMiner",
      "variant": "Alpha#"
    },
    "AlphaR": {
      "algorithm": "AlphaMiner",
      "variant": "AlphaR",
      "requiresCausalThreshold": true,
      "requiresNoiseThresholdLeastFreq": true,
      "requiresNoiseThresholdMostFreq": true
    },
    "HM": {
      "algorithm": "HeuristicsMiner",
      "variant": "Heuristics Miner",
      "requiresRelativeToBest": true,
      "requiresDependencyThreshold": true,
      "requiresLengthOneLoopsThreshold": true,
      "requiresLengthTwoLoopsThreshold": true,
      "requiresLongDistanceThreshold": true,
      "requiresAllTasksConnected": true,
      "requiresLongDistanceDependency": true,
      "requiresIgnoreLoopDependencyThresholds": true
    },
    "SM": {
      "algorithm": "SplitMiner",
      "variant": "Split Miner",
      "requiresEta": true,
      "requiresEpsilon": true,
      "requiresParallelismFirst": true,
      "requiresReplaceIORs": true,
      "requiresRemoveLoopActivities": true
    },
    "ILPMiner": {
      "algorithm": "HybridILPMiner",
      "variant": "Hybrid ILPMiner",
      "requiresLPObjective": true,
      "requiresOptionalConstraintPNet": true,
      "requiresLPFilter": true,
      "requiresSlackVariableFilterThreshold": true,
      "requiresSequenceEncodingCutoffLevel": true,
      "requiresLPVariableType": true
    }
  },
  "preprocessing_variants": {
    "MatrixFilter": {
      "method": "Matrix Filtering",
      "variant": "Conditional Probabilities (MF)",
      "requiresProbabilityOfRemoval": true,
      "requiresSubsequenceLength": true
    },
    "SequenceFilter": {
      "method": "Sequence Filtering",
      "variant": "Frequent Sequence Filtering (SF)",
      "requiresHighSupportPattern": true,
      "requiresOddDistance": true,
      "requiresConfHighConfRules": true,
      "requiresSuppHighConfRules": true,
      "requiresConfOrdinaryRules": true
    }
  },
  "parameters": {
    "probabilityOfRemoval": {
      "type": "float",
      "low": 0.01,
      "high": 0.4
    },
    "subsequenceLength": {
      "type": "integer",
      "low": 1,
      "high": 3
    },
    "highSupportPattern": {
      "type": "float",
      "low": 0.5,
      "high": 0.9
    },
    "oddDistance": {
      "type": "integer",
      "low": 0,
      "high": 3
    },
    "confHighConfRules": {
      "type": "float",
      "low": 0.7,
      "high": 0.99
    },
    "suppHighConfRules": {
      "type": "float",
      "low": 0.1,
      "high": 0.5
    },
    "confOrdinaryRules": {
      "type": "float",
      "low": 0.0,
      "high": 0.5
    },
    "noiseThreshold": {
      "type": "float",
      "low": 0.0,
      "high": 1.0
    },
    "causalThreshold": {
      "type": "float",
      "low": 1.0,
      "high": 120.0
    },
    "noiseThresholdLeastFreq": {
      "type": "float",
      "low": 0.0,
      "high": 1.0
    },
    "noiseThresholdMostFreq": {
      "type": "float",
      "low": 0.0,
      "high": 1.0
    },
    "relativeToBest": {
      "type": "float",
      "low": 1.0,
      "high": 10.0
    },
    "dependencyThreshold": {
      "type": "float",
      "low": 0.0,
      "high": 100.0
    },
    "lengthOneLoopsThreshold": {
      "type": "float",
      "low": 0.0,
      "high": 100.0
    },
    "lengthTwoLoopsThreshold": {
      "type": "float",
      "low": 0.0,
      "high": 100.0
    },
    "longDistanceThreshold": {
      "type": "float",
      "low": 0.0,
      "high": 100.0
    },
    "allTasksConnected": {
      "type": "categorical",
      "choices": [
        true,
        false
      ]
    },
    "longDistanceDependency": {
      "type": "categorical",
      "choices": [
        true,
        false
      ]
    },
    "ignoreLoopDependencyThresholds": {
      "type": "categorical",
      "choices": [
        true,
        false
      ]
    },
    "eta": {
      "type": "float",
      "low": 0.0,
      "high": 1.0
    },
    "epsilon": {
      "type": "float",
      "low": 0.0,
      "high": 1.0
    },
    "parallelismFirst": {
      "type": "categorical",
      "choices": [
        true,
        false
      ]
    },
    "replaceIORs": {
      "type": "categorical",
      "choices": [
        true,
        false
      ]
    },
    "removeLoopActivities": {
      "type": "categorical",
      "choices": [
        true,
        false
      ]
    },
    "lPVariableType": {
      "type": "categorical",
      "choices": [
        "Two variables per event",
        "One variable per event, two for an event which is potentially in a self loop",
        "One variable per event"
      ]
    },
    "lPObjective": {
      "type": "categorical",
      "choices": [
        "Minimize Arcs",
        "Unweighted Parikh values",
        "Weighted Parikh values, using absolute frequencies",
        "Weighted Parikh values, using relative frequencies"
      ]
    },
    "lPFilter": {
      "type": "categorical",
      "choices": [
        "None",
        "Sequence Encoding Filter",
        "Slack Variable Filter"
      ]
    },
    "slackVariableFilterThreshold": {
      "type": "float",
      "low": 0.0,
      "high": 1.0
    },
    "sequenceEncodingCutoffLevel": {
      "type": "float",
      "low": 0.0,
      "high": 1.0
    }
  }
}
